import numpy as np
from multiprocessing import Pool

def fitness_function(x):
    return np.sum(x**2)

def evaluate(wolf):
    return fitness_function(wolf)

def gwo_parallel(num_agents, dim, max_iter, lb, ub, cells=4):
    alpha_pos = np.zeros(dim)
    beta_pos = np.zeros(dim)
    delta_pos = np.zeros(dim)
    alpha_score = float("inf")
    beta_score = float("inf")
    delta_score = float("inf")
    wolves = np.random.uniform(lb, ub, (num_agents, dim))
    pool = Pool(processes=cells)

    for t in range(max_iter):
        fitness_values = pool.map(evaluate, wolves)
        for i in range(num_agents):
            fitness = fitness_values[i]
            if fitness < alpha_score:
                delta_score, delta_pos = beta_score, beta_pos.copy()
                beta_score, beta_pos = alpha_score, alpha_pos.copy()
                alpha_score, alpha_pos = fitness, wolves[i].copy()
            elif fitness < beta_score:
                delta_score, delta_pos = beta_score, beta_pos.copy()
                beta_score, beta_pos = fitness, wolves[i].copy()
            elif fitness < delta_score:
                delta_score, delta_pos = fitness, wolves[i].copy()

        a = 2 - t * (2 / max_iter)
        new_wolves = np.zeros_like(wolves)

        for i in range(num_agents):
            left = wolves[(i - 1) % num_agents]
            right = wolves[(i + 1) % num_agents]
            local_best = np.mean([wolves[i], left, right], axis=0)
            for j in range(dim):
                r1, r2 = np.random.rand(), np.random.rand()
                A1, C1 = 2 * a * r1 - a, 2 * r2
                D_alpha = abs(C1 * alpha_pos[j] - local_best[j])
                X1 = alpha_pos[j] - A1 * D_alpha

                r1, r2 = np.random.rand(), np.random.rand()
                A2, C2 = 2 * a * r1 - a, 2 * r2
                D_beta = abs(C2 * beta_pos[j] - local_best[j])
                X2 = beta_pos[j] - A2 * D_beta

                r1, r2 = np.random.rand(), np.random.rand()
                A3, C3 = 2 * a * r1 - a, 2 * r2
                D_delta = abs(C3 * delta_pos[j] - local_best[j])
                X3 = delta_pos[j] - A3 * D_delta

                new_wolves[i][j] = (X1 + X2 + X3) / 3

        wolves = np.clip(new_wolves, lb, ub)

    pool.close()
    pool.join()
    return alpha_pos, alpha_score

best_pos, best_score = gwo_parallel(num_agents=20, dim=5, max_iter=100, lb=-10, ub=10, cells=4)
print("Best position:", best_pos)
print("Best fitness:", best_score)
